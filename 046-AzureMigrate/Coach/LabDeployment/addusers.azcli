#!/bin/bash
# Create users and grant Contributor access to the previously created RGs
domain=$(az account show -o tsv --query user.name | cut -d@ -f 2)
user_no=2
for ((i=1;i<=user_no;i++)); do
    user_id=hacker$(printf "%02d" $i)
    user_principal="${user_id}@${domain}"
    user_password=$(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-12};echo;)
    user_object_id=$(az ad user show --id "$user_principal" --query objectId -o tsv)
    if [[ -z "$user_object_id" ]]
    then
        echo "Creating user ${user_principal}, password ${user_password}..."
        az ad user create --display-name "$user_id" --user-principal-name "$user_principal" --password "$user_password" -o none
        user_object_id=$(az ad user show --id "$user_principal" --query objectId -o tsv)
    else
        echo "User ${user_principal} already exists"
    fi
    echo "Creating role assignments for user $user_principal..."
    rg_array=( "$rg_onprem" "$rg_azure_prod" )
    for rg in "${rg_array[@]}"
    do
        echo "Adding contributor role for $user_principal on RG $rg..."
        rg_id=$(az group show -n $rg --query id -o tsv)
        az role assignment create --scope $rg_id --role Contributor --assignee $user_object_id -o none
    done
    echo "Adding role assignments at the subscription level..."
    # Create custom role
    subscription_id=$(az account show --query id -o tsv)
    subscription_scope="/subscriptions/${subscription_id}"
    custom_role_file=/tmp/customrole.json
    # Note: the action on "services" is not available in the API, only "sqlMigrationServices", however it is required by the portal, hence using star wildcard
    cat <<EOF > $custom_role_file
{
  "Name": "Migration Admin",
  "IsCustom": true,
  "Description": "Migration Administrator",
  "Actions": [
    "Microsoft.KeyVault/register/action",
    "Microsoft.Migrate/register/action",
    "Microsoft.OffAzure/register/action",
    "Microsoft.Resources/deployments/*/read",
    "Microsoft.Resources/deployments/*/write",
    "Microsoft.Network/networkInterfaces/ipConfigurations/read",
    "Microsoft.Network/virtualNetworks/subnets/join/action",
    "Microsoft.DataMigration/sqlMigrationServices/*/action",
    "Microsoft.DataMigration/sqlMigrationServices/*/delete",
    "Microsoft.DataMigration/sqlMigrationServices/*/read",
    "Microsoft.DataMigration/sqlMigrationServices/*/write",
    "Microsoft.DataMigration/locations/*/read",
    "Microsoft.DataMigration/*/action",
    "Microsoft.DataMigration/*/delete",
    "Microsoft.DataMigration/*/read",
    "Microsoft.DataMigration/*/write"
   ],
  "NotActions": [],
  "DataActions": [],
  "NotDataActions": [],
  "AssignableScopes": [
    "/subscriptions/$subscription_id"
  ]
}
EOF
    role_id=$(az role definition list -n "Migration Admin" --query '[].id' -o tsv)
    if [[ -z "$role_id" ]]
    then
        echo "Role Migration Admin could not be found, creating new..."
        az role definition create --role-definition "$custom_role_file"
        role_id=$(az role definition list -n "Migration Admin" --query '[].id' -o tsv)
    else
        echo "Role Migration Admin already exists, updating..."
        az role definition update --role-definition "$custom_role_file"
    fi
    # Assign role to user
    az role assignment create --scope $subscription_scope --role $role_id --assignee $user_object_id -o none
done

