apiVersion: v1
kind: Namespace
metadata:
  name: __namespace__
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: api
  name: api
  namespace:  __namespace__
spec:
  replicas: 1
  selector:
    matchLabels:
      run: api
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: api
        aadpodidbinding: "__identity_name__"
    spec:
      containers:
      - image: __acr_name__.azurecr.io/hack/sqlapi:1.0
        imagePullPolicy: Always
        name: api
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
        - name: SQL_SERVER_FQDN
          valueFrom:
            configMapKeyRef:
              name: sqlconfig
              key: sql_fqdn
        - name: SQL_SERVER_USERNAME
          valueFrom:
            configMapKeyRef:
              name: sqlconfig
              key: sql_user
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/secrets"
          readOnly: true
        livenessProbe:
          httpGet:
            path: /api/healthcheck
            port: 8080
        resources:
          requests:
            memory: "64Mi"
            cpu: "125m"
          limits:
            memory: "128Mi"
            cpu: "500m"
      restartPolicy: Always
      volumes:
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "__akv_name__"
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace:  __namespace__
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    run: api
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sqlconfig
  namespace:  __namespace__
data:
  sql_fqdn: "__sql_server_name__.database.windows.net"
  sql_user: "__sql_username__"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace:  __namespace__
  labels:
    run: web
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      run: web
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: web
    spec:
      containers:
      - image: __acr_name__.azurecr.io/hack/web:1.0
        imagePullPolicy: Always
        name: web
        ports:
        - containerPort: 80
          protocol: TCP
        env:
        - name: API_URL
          value: "http://api.__namespace__.svc.cluster.local:8080"
        - name: BRANDING
          value: "whatthehack"
        resources:
          requests:
            memory: "64Mi"
            cpu: "125m"
          limits:
            memory: "128Mi"
            cpu: "500m"
          restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace:  __namespace__
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    run: web
---
apiVersion: "aadpodidentity.k8s.io/v1"
kind: AzureIdentity
metadata:
  name: __identity_name__
  namespace:  __namespace__
spec:
  type: 0
  resourceID: __identity_id__
  clientID: __identity_client_id__
---
apiVersion: "aadpodidentity.k8s.io/v1"
kind: AzureIdentityBinding
metadata:
  name: __identity_name__-binding
  namespace:  __namespace__
spec:
  azureIdentity: __identity_name__
  selector: __identity_name__
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: web
  namespace: __namespace__
  annotations:
    kubernetes.io/ingress.class: __ingress_class__
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
spec:
  rules:
  - host: __namespace__.__ingress_ip__.nip.io
    http:
      paths:
      - path: /
        backend:
          serviceName: web
          servicePort: 80
      - path: /api/
        backend:
          serviceName: api
          servicePort: 8080

